---
title: Research_Insurance-Dynamics
bibliography: references.bib
editor_options: 
  chunk_output_type: console
execute:
  cache: true  
lightbox: true
---

# To Do and References to Incorporate

TK need to incorporate secular mortality

[Markov model](https://hbiostat.org/r/hmisc/markov/sim#content)

[weighting in regression (see 2nd post)][https://www.statalist.org/forums/forum/general-stata-discussion/general/1420211-is-the-use-of-sampling-weights-in-regression-always-best-or-are-there-tradeoffs-that-need-to-be-considered]

[length bias](https://journals.sagepub.com/doi/10.1177/0962280219832901)

[Multistate model using survival package](https://cran.r-project.org/web/packages/survival/vignettes/compete.pdf)

[Bayesian Calibration](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9198004/)

# Data

## MEPS

```{r}
#| message: false
#| warning: false
#| echo: false
source(here::here("R/download-and-prepare-meps-data.r"))
```

```{r}
#| layout-ncol: 2
#| fig-cap: 
#|   - 2012-2013
#|   - 2019-2022
#| code-fold: true
#| code-summary: MEPS Coverage Estimates
#| message: false
#| warning: false
p_pre
p_post
```


## Human Mortality Database

```{r, eval = FALSE}
source("~/")
tmp <- demography::hmd.mx("USA",username = hmd_u, password = hmd_p, paste0("USA"))
yy = max(tmp$year)

lt =  demography::lifetable(tmp,series = "total", years = 2012)   # life table for background mortality

ages_lt     <- lt$age[lt$age<100]
deaths   <- lt$dx[lt$age<100]
exposure <- lt$lx[lt$age<100]

hp_fit12 <- MortalityLaws::MortalityLaw(
  x  = ages_lt,      # vector with ages
  Dx  = deaths,   # vector with death counts
  Ex  = exposure, # vector containing exposures
  law = "HP",
  opt.method = "LF2")

lt =  demography::lifetable(tmp,series = "total", years = 2012)   # life table for background mortality

ages_lt     <- lt$age[lt$age<100]
deaths   <- lt$dx[lt$age<100]
exposure <- lt$lx[lt$age<100]

hp_fit18 <- MortalityLaws::MortalityLaw(
  x  = ages_lt,      # vector with ages
  Dx  = deaths,   # vector with death counts
  Ex  = exposure, # vector containing exposures
  law = "HP",
  opt.method = "LF2")

list("2012" = hp_fit12, "2018" = hp_fit18) %>% 
    write_rds(here("_data/hmd/heligman-pollard-fitted-mortality.rds"))

```

```{r, eval = FALSE}
mortality <- 
    read_rds(here("_data/hmd/heligman-pollard-fitted-mortality.rds"))
```

# Parameterize

## Basic Parameters

```{r, eval = FALSE}
params_ <- list(
    v_tx_names = c("2012","2018"),    # Cohorts
    n_tx = 2,    
    
    v_tr_names = c("Employer","OthPrivate","Public","Uninsured"),
    v_ab_names = c("Medicare","Death"),
    n_states = 6,
    
    horizon =  110,
    
    mort_coef12 = mortality[["2012"]]$coefficients,
    mort_coef18 = mortality[["2018"]]$coefficients,
    mort_fn = MortalityLaws::HP, 
    
    Delta_t = 1, # cycle duration (1 = year)
    age0 = 0  # initial age
)

params <- 
    with(params_,{
        modifyList(params_,list(
            v_names_states = c(v_tr_names, v_ab_names), # state names
            omega = horizon/Delta_t,  # Total number of cycles
            ages = (0:(horizon/Delta_t))*Delta_t + age0, 
            alpha = length(v_ab_names),
            tau = length(v_tr_names), 
            s = length(v_tr_names)*horizon/Delta_t + length(v_ab_names) #total number of states;s=τω+α
        ))
    })

params$ages_trace <- params$ages
params$ages <- params$ages[-length(params$ages)] 
```

## Transition Intensities

### Multistate Model

```{r, eval = FALSE}
# Specify the transition structure (diagonals don't matter)
Q = rbind(c(0,1,1,1),
          c(1,0,1,1),
          c(1,1,0,1),
          c(1,1,1,0))

age_cats <- c(0,10,18,21,26,30,35,40,45,50,55,60,62100)



df_pre <- 
    df_final_pre %>% 
    arrange(dupersid,year,month) %>% 
    mutate(cycle = (year - min(as.numeric(pre_lut))) * 12 + month(month) ) %>% 
    select(dupersid,age,racev1x,longwt,cycle,type) %>% 
    na.omit() %>% 
    as_tibble() %>% 
    group_by(dupersid) %>% 
    # SAMPLE EXCLUSION: <3 cycles observed
    filter(n()>=3) %>% 
    ungroup() %>% 
    na.omit() %>% 
    # Sample EXCLUSION: Medicare -> Other Types of Insurance Not Allowed (only 2 cases)
    group_by(dupersid) %>% 
    mutate(nonelderly_medicare = max(type==5 & age <65)) %>% 
    filter(nonelderly_medicare == 0) %>% 
    mutate(max_age = max(age)) %>% 
    filter(max_age <= 64) %>% 
    ungroup() %>% 
    select(dupersid, longwt, months = cycle, state = type, age = age) %>% 
    mutate(age_cat = cut(age, breaks = params$age_categories)) %>% 
    mutate(age_18 = as.integer(age == 18), 
           age_19 = as.integer(age == 19),
           age_25 = as.integer(age == 25)) %>% 
    mutate(age_sq = age * age) %>% 
    mutate(age_cat = cut(age, breaks = age_cats, include.lowest = TRUE)) %>% 
    fastDummies::dummy_cols("age_cat") %>% 
    janitor::clean_names() %>% 
    select(-age_cat_na)

df_pre_trans <- 
    df_pre %>% 
    group_by(dupersid) %>% 
    # Filter to individuals who have at least one insurance transition. 
    mutate(transition = as.integer(lead(state) != state)) %>% 
    mutate(transition = case_when(is.na(transition) ~ 0, .default=transition)) %>% 
    mutate(transition = max(transition)) %>% 
    filter(transition==1)  %>% 
    # Restrict only to time periods after the transition point. 
    mutate(transition_point = row_number() * as.integer(state != lag(state))) %>% 
    ungroup() %>% 
    mutate(transition_point = case_when(transition_point == 0 ~ 100, 
                                        is.na(transition_point) ~ 100, 
                                        .default = transition_point)) %>% 
    mutate(transition_point2 = ave(transition_point,dupersid, FUN = function(x) min(x, na.rm=TRUE))) %>% 
    group_by(dupersid) %>%
    filter(row_number()>=transition_point2) %>% 
    group_by(dupersid) %>% 
    # Need at least 2 post-transition months observed. 
    filter(n()>=2) %>% 
    # Recenter time relative to transition. 
    mutate(months = row_number()) %>% 
    ungroup() %>% 
    select(-contains("transition")) %>% 
    mutate(longwt = (longwt - mean(longwt))/sd(longwt))

age_cat_fmla <- as.formula(paste0("~ ",paste0(paste0(grep("age_cat_",names(df_pre_trans), value = TRUE))[-1],collapse = "+"))); age_cat_fmla

fit_pre <- msm(state ~ months, 
           subject = dupersid,
           data = df_pre_trans, 
           qmatrix = Q,
           gen.inits = TRUE, 
           covariates = age_cat_fmla, 
           control=list(fnscale=4000, maxit = 1000))

df_post <- 
    df_final_post %>% 
    arrange(dupersid,year,month) %>% 
    mutate(cycle = (year - 2018) * 12 + month ) %>% 
    select(dupersid,age,racev1x,longwt,cycle,type) %>% 
    na.omit() %>% 
    as_tibble() %>% 
    group_by(dupersid) %>% 
    # SAMPLE EXCLUSION: <3 cycles observed
    filter(n()>=3) %>% 
    ungroup() %>% 
    na.omit() %>% 
    # Sample EXCLUSION: Medicare -> Other Types of Insurance Not Allowed (only 2 cases)
    group_by(dupersid) %>% 
    mutate(nonelderly_medicare = max(type==5 & age <65)) %>% 
    filter(nonelderly_medicare == 0) %>% 
    mutate(max_age = max(age)) %>% 
    filter(max_age <= 64) %>% 
    ungroup() %>% 
    select(dupersid, longwt, months = cycle, state = type, age = age) %>% 
    mutate(age_cat = cut(age, breaks = params$age_categories)) %>% 
    mutate(age_18 = as.integer(age == 18), 
           age_19 = as.integer(age == 19),
           age_26 = as.integer(age == 26)) %>% 
    mutate(age_cat = cut(age, breaks = age_cats, include.lowest = TRUE)) %>% 
    fastDummies::dummy_cols("age_cat") %>% 
    janitor::clean_names() 

df_post_trans <- 
    df_post %>% 
    group_by(dupersid) %>% 
    # Filter to individuals who have at least one insurance transition. 
    mutate(transition = as.integer(lead(state) != state)) %>% 
    mutate(transition = case_when(is.na(transition) ~ 0, .default=transition)) %>% 
    mutate(transition = max(transition)) %>% 
    filter(transition==1)  %>% 
    # Restrict only to time periods after the transition point. 
    mutate(transition_point = row_number() * as.integer(state != lag(state))) %>% 
    ungroup() %>% 
    mutate(transition_point = case_when(transition_point == 0 ~ 100, 
                                        is.na(transition_point) ~ 100, 
                                        .default = transition_point)) %>% 
    mutate(transition_point2 = ave(transition_point,dupersid, FUN = function(x) min(x, na.rm=TRUE))) %>% 
    group_by(dupersid) %>%
    filter(row_number()>=transition_point2) %>% 
    group_by(dupersid) %>% 
    # Need at least 2 post-transition months observed. 
    filter(n()>=2) %>% 
    # Recenter time relative to transition. 
    mutate(months = row_number()) %>% 
    ungroup() %>% 
    select(-contains("transition")) %>% 
    mutate(longwt = scale(longwt))


fit_post <- msm(state ~ months, 
           subject = dupersid,
           data = df_post_trans, 
           qmatrix = Q,
           gen.inits = TRUE, covariates = age_cat_fmla, 
           control=list(fnscale=4000, maxit = 1000))
```

```{r, eval = FALSE}

paste0(grep("age_cat_",names(df_pre_trans), value = TRUE))[-1] 


fn_r_D <- function(age,cohort_year) {
  # Access r_HD from the parent frame where this function is called
  mort_fn <- get("mort_fn", envir = parent.frame())
  mort_coef <- get(cohort_year, envir = parent.frame())
  r_HD <- mort_fn(x = age, par = mort_coef)$hx
  r_HD
}

params_int <- with(params, modifyList(params, list(m_R =
                                                ages %>% map( ~ ({
                                                    
                                                    covars_ = tibble(age = .x) %>%
                                                        mutate(age_cat = cut(age, age_cats, include.lowest =
                                                                                 TRUE)) %>%
                                                        fastDummies::dummy_cols("age_cat") %>%
                                                        janitor::clean_names() %>%
                                                        select(starts_with("age_cat_")) %>%
                                                        as.list()
                                                    
                                                
                                                    mRpre = {
                                                        if (.x < 64) {
                                                            tmp_ <-
                                                                qmatrix.msm(
                                                                    fit_pre,
                                                                    ci = "none",
                                                                    covariates = covars_[-1]
                                                                ) %>%
                                                                as.matrix()
                                                            tmp_ <- cbind(tmp_, rep(0, nrow(tmp_)), rep(0, nrow(tmp_)))
                                                            tmp_
                                                            tmp_ <- rbind(tmp_, rep(0, ncol(tmp_)), rep(0, ncol(tmp_)))
                                                            tmp_
                                                            tmp_ <- tmp_ * 12 # Convert from monthly (MEPS data ) to yearly time scale
                                                            dimnames(tmp_) = list(
                                                                c(params$v_tr_names, params$v_ab_names),
                                                                c(params$v_tr_names, params$v_ab_names)
                                                            )
                                                            tmp_[, "Death"] <- with(params, c(rep(
                                                                fn_r_D(.x, "mort_coef12"), length(v_tr_names) + 1
                                                            ), rep(0, length(
                                                                v_ab_names
                                                            ) - 1)))
                                                            diag(tmp_) = 0
                                                            diag(tmp_) = -rowSums(tmp_)
                                                            tmp_
                                                        } else if (.x >= 64) {
                                                            tmp_ <-
                                                                matrix(
                                                                    0,
                                                                    nrow = length(params$v_tr_names),
                                                                    ncol = length(params$v_tr_names)
                                                                )
                                                            tmp_ <- cbind(tmp_, rep(0, nrow(tmp_)), rep(0, nrow(tmp_)))
                                                            tmp_
                                                            tmp_ <- rbind(tmp_, rep(0, ncol(tmp_)), rep(0, ncol(tmp_)))
                                                            tmp_
                                                            tmp_ <- tmp_ * 12 # Convert from monthly (MEPS data ) to yearly time scale
                                                            dimnames(tmp_) = list(
                                                                c(params$v_tr_names, params$v_ab_names),
                                                                c(params$v_tr_names, params$v_ab_names)
                                                            )
                                                            tmp_[, "Medicare"] <- c(rep(100, length(params$v_tr_names) + 1), 0)
                                                            tmp_[, "Death"] <- with(params, c(rep(
                                                                fn_r_D(.x, "mort_coef12"), length(v_tr_names) + 1
                                                            ), rep(0, length(
                                                                v_ab_names
                                                            ) - 1)))
                                                            diag(tmp_) = 0
                                                            diag(tmp_) = -rowSums(tmp_)
                                                            tmp_
                                                        }
                                                    }
                                                    
                                                    mRpost = {
                                                        if (.x < 64) {
                                                            tmp_ <-
                                                                qmatrix.msm(
                                                                    fit_post,
                                                                    ci = "none",
                                                                    covariates = covars_[-1]
                                                                ) %>%
                                                                as.matrix()
                                                            tmp_ <- cbind(tmp_, rep(0, nrow(tmp_)), rep(0, nrow(tmp_)))
                                                            tmp_
                                                            tmp_ <- rbind(tmp_, rep(0, ncol(tmp_)), rep(0, ncol(tmp_)))
                                                            tmp_
                                                            tmp_ <- tmp_ * 12 # Convert from monthly (MEPS data ) to yearly time scale
                                                            dimnames(tmp_) = list(
                                                                c(params$v_tr_names, params$v_ab_names),
                                                                c(params$v_tr_names, params$v_ab_names)
                                                            )
                                                            tmp_[, "Death"] <- with(params, c(rep(
                                                                fn_r_D(.x, "mort_coef12"), length(v_tr_names) + 1
                                                            ), rep(0, length(
                                                                v_ab_names
                                                            ) - 1)))
                                                            diag(tmp_) = 0
                                                            diag(tmp_) = -rowSums(tmp_)
                                                            tmp_
                                                        } else if (.x >= 64) {
                                                            tmp_ <-
                                                                matrix(
                                                                    0,
                                                                    nrow = length(params$v_tr_names),
                                                                    ncol = length(params$v_tr_names)
                                                                )
                                                            tmp_ <- cbind(tmp_, rep(0, nrow(tmp_)), rep(0, nrow(tmp_)))
                                                            tmp_
                                                            tmp_ <- rbind(tmp_, rep(0, ncol(tmp_)), rep(0, ncol(tmp_)))
                                                            tmp_
                                                            tmp_ <- tmp_ * 12 # Convert from monthly (MEPS data ) to yearly time scale
                                                            dimnames(tmp_) = list(
                                                                c(params$v_tr_names, params$v_ab_names),
                                                                c(params$v_tr_names, params$v_ab_names)
                                                            )
                                                            tmp_[, "Medicare"] <- c(rep(100, length(params$v_tr_names) + 1), 0)
                                                            tmp_[, "Death"] <- with(params, c(rep(
                                                                fn_r_D(.x, "mort_coef12"), length(v_tr_names) + 1
                                                            ), rep(0, length(
                                                                v_ab_names
                                                            ) - 1)))
                                                            diag(tmp_) = 0
                                                            diag(tmp_) = -rowSums(tmp_)
                                                            tmp_
                                                        }
                                                    }
                                                    
                                                    array(c(as.vector(mRpre),
                                                          as.vector(mRpost)), 
                                                            dim = c(length(v_tr_names)+ length(v_ab_names),length(v_tr_names)+ length(v_ab_names),length(v_tx_names)),
                                                            dimnames = list(c(v_tr_names,v_ab_names),c(v_tr_names,v_ab_names),v_tx_names)) %>% 
                                                            apply(.,3,function(x) x, simplify=FALSE) 
                                                    
                                                }))
                                            )
                               )
            )

params_int <- with(params_int,modifyList(params_int,list(
  m_P = m_R %>% transpose() %>% map(~({
    mR_ = .x
    mR_ %>% map(~({
      expm(.x * Delta_t)
    }))
  }))
)))

params_int <- with(params_int,modifyList(params_int,list(
  m_P_ = m_P %>% map(~({
    tmp <- .x
    init <- diag(nrow=nrow(tmp[[1]]),ncol=ncol(tmp[[1]]))
    dimnames(init) = dimnames(tmp[[1]])
    append(.x,list(init),after=0)
  }))
)))
params_int$m_P = params_int$m_P_
params_int[["m_P_"]] <- NULL


s0 <-  
    df_pre %>% filter(months ==1 & age <=1 )  %>% 
    count(state) %>% 
    mutate(n = n/sum(n)) %>% 
    pull(n)

trace_int <- 
  with(params_int, {
    m_P %>% map( ~ ({
      P = .x
      occ <- c(s0,0,0)
      P %>% map(~({
        occ <<- occ %*% .x
      })) %>% 
        map(~(data.frame(.x))) %>% 
        bind_rows()
    }))
  })  

trace_int %>% 
    map(~({.x %>% mutate(age = params_int$ages_trace)})) %>% 
    bind_rows(.id = "year") %>% 
    as_tibble() %>% 
    gather(outcome, value,-year,-age) %>% 
    ggplot(aes( x= age, y = value, colour = outcome, lty = year)) + geom_line() +
    hrbrthemes::theme_ipsum() + 
    geom_dl(method = list("first.points","bumpup"), aes(label = outcome))  +
    scale_x_continuous(expand = c(0.4,0)) + 
    theme(legend.position = "none")
```

```{r, eval = FALSE}
params_adv <- with(params_int,modifyList(params_int,list(
  alpha = length(v_ab_names),
  tau = length(v_tr_names), 
  s = length(v_tr_names)*omega + length(v_ab_names) #total number of states;s=τω+α
)))

# approach 3 requires us to transpose transition intensity matrices from approaches 1 & 2 
params_adv <- with(params_adv,modifyList(params_adv,list(
  m_R_t = m_R %>% map(~({
    tmp <- .x
    tmp %>% map(~(t(.x)))
  }))
)))

# not sure why this is needed, but otherwise the length gets set too long...
params_adv <- with(params_adv, modifyList(params_adv, list(mR_ = m_R_t %>% transpose())))
params_adv$mR = params_adv$mR_

params_adv <- with(params_adv,modifyList(params_adv,list(
  mV = mR %>% map(~({
    R = .x
    R %>% map(~({
      m <- .x[v_tr_names,v_tr_names] 
    }))
    
  })),
  
  mQ = mR %>% map(~({
    R = .x 
    R %>% map(~({
      V = .x[v_tr_names,v_tr_names]
      S = .x[v_ab_names,v_tr_names]
      zero_ <- matrix(0, nrow = length(v_tr_names)+length(v_ab_names), ncol = length(v_ab_names))
      tmp <- cbind(rbind(V,S),zero_)
      dimnames(tmp) <- list(c(v_tr_names,v_ab_names),c(v_tr_names,v_ab_names))
      tmp
    }))
  }))    
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  mP = mQ %>% map(~({
    Q = .x
    Q %>% map(~(expm(.x * Delta_t)))
  }))
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  mU = mP %>% map(~({
    P <- .x 
    P %>% map(~(.x[v_tr_names,v_tr_names]))
  })),
  mM = mP %>% map(~({
    P = .x
    P %>% map(~(.x[v_ab_names,v_tr_names]))
    
  }))
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  D = {
    # Create diagonal age advancement matrix
    D <- matrix(0, omega, omega)
    vec <- rep(1, omega-1)
    D[row(D)-1 == col(D)] <- vec
    D[omega,omega] = 1
    D
  }
)))

vec <-  # a simple function to return the vec of an array
  function(x) {
    y <- c(x)
    return(y)
  }

vecperm <- 
  # vecperm
  # function to calculate the vec permutation matrix K of index m,n
  # let X be a m x n matrix, and X' the transpose of X
  # then K satisfies 
  # vec(X') = K*vec(X)
  function(m, n) {
    K <- matrix(0, m * n, m * n)
    a <- matrix(0, m, n)
    
    for (i in 1:m) {
      for (j in 1:n) {
        e <- a
        e[i, j] <- 1
        K <- K + kronecker(e, t(e))
      }
    }
    
    return(K)
  }

params_adv <- with(params_adv,modifyList(params_adv,list(
  bbD_ = kronecker(diag(tau), D),
  bbU_ =  mU %>% 
    map(~(bdiag(.x))),
  K = vecperm(tau, omega)
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  mUtilde = bbU_ %>% map( ~ ({
    t(K) %*% bbD_ %*% K %*% .x
  }))
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  mMtilde = mM %>% map(~({
    do.call(cbind,.x) 
  }))  
)))

params_adv <- with(params_adv,modifyList(params_adv,list(
  mPtilde =  map2(mUtilde, mMtilde,  ~ ({
    rbind(cbind(.x, matrix(0, tau * omega, alpha)) ,
          cbind(.y, diag(alpha)))
  }))
)))

mcwr_occupancy <- function(params, H, V) {
  with(params,{
    map(v_tx_names,~({
      U = mUtilde[[.x]]
      P = mPtilde[[.x]]
      v_ = V[[.x]]
      N = solve(diag(tau*omega)-U)
      h = vec(H) %>% as.matrix()
      not_h = 1-h
      v <- vec(v_) %>% as.matrix()
      B1 <- h %*% t(v) + 0.5 * (not_h %*% t(v)) + 0.5 * (v %*% t(not_h)) # Eq. 46
      C1 = 0.5 * (rep(1,alpha) %*%  t(v)) # Eq. 48
      R1 = rbind(cbind(B1, matrix(0, tau * omega, alpha)) ,
                 cbind(C1, diag(alpha))) 
      R2 = R1 * R1
      R3 = R1 * R1 * R1
      Z = cbind(diag(tau*omega),matrix(0,nrow=tau*omega, ncol=alpha))
      e = rep(1,s)
      rho1_ <- t(N)%*% Z %*% t(P * R1) %*% e
      rho1_
    }))
  })
}

H = with(params_adv,matrix(1,nrow=tau, ncol=omega))

with(params_adv,{
  V_INS  <<- v_tx_names %>% map(~({
    v_ <- matrix(1,nrow=tau, ncol = omega) 
    v_[4,] <- 0
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params_adv,{
  V_PRI <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 1     
    v_[2,] <- 1
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params_adv,{
  V_EMP <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 1     
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params_adv,{
  V_NG <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[2,] <- 1
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params_adv,{
  V_PUB <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[3,] <- 1     
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params_adv,{
  V_UNIN <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[4,] <- 1     
    v_
  })) %>% 
    set_names(v_tx_names)
})


params_adv$v_tr_names %>% map( ~ ({
    i = which(params_adv$v_tr_names==.x)
    INS_ <- params_adv %>% mcwr_occupancy(H = H, V = V_INS)
    INS <- INS_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_INS = unlist(INS) %>% diff()
    
    EMP_ <- params_adv %>% mcwr_occupancy(H = H, V = V_EMP)
    EMP <- EMP_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_EMP = unlist(EMP) %>% diff()
    
    NG_ <- params_adv %>% mcwr_occupancy(H = H, V = V_NG)
    NG <- NG_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_NG = unlist(NG) %>% diff()
    
    PRI_ <- params_adv %>% mcwr_occupancy(H = H, V = V_PRI)
    PRI <- PRI_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_PRI = unlist(PRI) %>% diff()
    
    PUB_ <- params_adv %>% mcwr_occupancy(H = H, V = V_PUB)
    PUB <- PUB_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_PUB = unlist(PUB) %>% diff()
    
    UNIN_ <- params_adv %>% mcwr_occupancy(H = H, V = V_UNIN)
    UNIN <- UNIN_ %>% map( ~ ({
        tmp <- (kronecker(t(c(
            1, rep(0, params_adv$omega - 1)
        )) , diag(params_adv$tau)) %*% as.matrix(.x))
        tmp[i, 1]
    }))
    diff_UNIN = unlist(UNIN) %>% diff()
    
    
    out <- c(unlist(EMP),diff_EMP, unlist(NG), diff_NG, unlist(PUB), diff_PUB, unlist(PRI), diff_PRI, unlist(INS), diff_INS,unlist(UNIN),diff_UNIN)
    names(out) = c("employer_2012","employer_2018","employer_change",
                   "ng_2012","ng_2018","ng_change",
                   "public_2012", "public_2018", "public_change",
                   "private_2012","private_2018", "private_change",
                   "insured_2012","insured_2018", "insured_change",
                   "uninsured_2012","uninsured_2018", "uninsured_change")
out
})) -> res

res %>% map(~({
    .x %>% 
     as.data.frame() %>% 
    set_names("value") %>% 
    rownames_to_column(var = "outcome") 
})) %>% 
    cbind.data.frame() %>% 
    {.[,-c(3,5,7)]} %>% 
    set_names(c("outcome",params$v_tr_names)) %>% 
    separate(outcome, into = c("type","year")) 
   


```

```{r, eval = FALSE}

```

## American Community Survey

```{r, eval = FALSE}
library(ipumsr)
vignette("ipums-read")

```
