---
title: Research_Insurance-Dynamics
bibliography: references.bib
editor_options: 
  chunk_output_type: console
execute:
  cache: true  
---

TK need to incorporate secular mortality

[weighting in regression (see 2nd post)][https://www.statalist.org/forums/forum/general-stata-discussion/general/1420211-is-the-use-of-sampling-weights-in-regression-always-best-or-are-there-tradeoffs-that-need-to-be-considered]

[length bias](https://journals.sagepub.com/doi/10.1177/0962280219832901)

```{r setup}
library(tidyverse)
library(here)
library(glue)
library(janitor)
library(haven)
library(mstate)
library(expm)
library(msm)
library(MASS)
library(expm)
library(knitr)
library(kableExtra)
library(dampack)
library(here)
library(Hmisc)
library(hrbrthemes)
library(ggsci)
library(janitor)
library(directlabels)
library(patchwork)
#remotes::install_github("davidgohel/flextable")
library(flextable)
options(scipen = 5) 
transpose <- purrr::transpose
select <- dplyr::select

format_number <- function(x, k = 3, m = 0) {
    ifelse(x == 0, 
           "0.0", 
           ifelse(x >= 1000, 
                  formatC(round(x, m), format = "f", big.mark = ",", digits = m),
                  formatC(round(x, k), format = "f", big.mark = ",", digits = k)))
}
prepare_multistate_data <- function(df, timevar, statevar, idvar) {
  tt <- enquo(timevar)
  ss <- enquo(statevar)
  id <- enquo(idvar)
  
  t0 <- df %>% summarise(min = min(!!tt,na.rm=TRUE))
  
  wide_vars <- c(names(df)[-which(names(df) %in% c(quo_name(tt),quo_name(ss)))],"baseline","max_time")
  
  df_wide <- 
    df %>% 
    group_by(!!id) %>% 
    mutate(max_time = max(!!tt)) %>% 
    mutate(!!quo_name(tt) := paste0("tmp_",!!tt)) %>% 
    arrange(!!id,!!tt) %>%
    ungroup() %>% 
    spread(!!tt,!!ss) %>% 
    mutate(baseline = tmp_1) %>% 
    gather(!!tt,!!ss,-wide_vars) %>% 
    filter(!is.na(baseline)) %>% 
    mutate(!!quo_name(tt) := as.numeric(gsub("tmp_","",!!tt))) %>% 
    arrange(!!id,!!tt) %>% 
    group_by(!!id) %>% 
    mutate(transition = as.integer(baseline != !!ss & !is.na(!!ss))) %>%
    mutate(censored = as.integer(is.na(!!ss))) %>%
    mutate(admin_censor = as.integer(max(transition)==0 & max(censored==0) & row_number()==n())) %>%
    mutate(admin_censor = ifelse(censored==1,0,admin_censor)) %>%
    mutate(type = 1 * max(transition==1) + 2 * max(censored==1) + 3 * (max(admin_censor==1) & max(censored)!=1)) %>%
    filter((admin_censor==1 & type == 3) | (type == 1 & transition==1) | (type==2 & censored==1)) %>% 
    filter(row_number()==1) %>% 
    ungroup() 
  
  transition_types <- df_wide %>% pull(baseline) %>% unique() %>% sort()

  df_wide <- 
    transition_types %>% 
    map(~(
      df_wide %>% mutate(time_to_event = ifelse(transition==1 & !!ss==.x ,!!tt,
                                          ifelse(censored==1,!!tt,max_time))) %>% 
        mutate(status = ifelse(transition==1 & !!ss==.x,1,0)) %>% 
        select(time_to_event,status) %>% 
        set_names(c(paste0("time_",.x),paste0("status_",.x)))
    )) %>% bind_cols() %>% 
    bind_cols(df_wide,.)
  
 

  ls_tmat <- 
    transition_types %>% 
    map(~(
      matrix(t(matrix(c(NA,1:(length(transition_types)-1), rep(rep(NA,length(transition_types)),length(transition_types)-1)),nrow= length(transition_types),ncol= length(transition_types))),
        nrow = length(transition_types),ncol= length(transition_types),
             dimnames = list(from = c(.x,transition_types[-which(transition_types==.x)]), to=c(.x,transition_types[-which(transition_types==.x)]))
               ) 
    )) %>% 
    set_names(transition_types)
  
  ls_ms <- list()

  for (.x in transition_types) {

    tmat <- ls_tmat[[.x]]
    
    df_times <- df_wide %>% filter(baseline==.x) %>% select_at(vars(paste0("time_",colnames(tmat)))) %>% 
      mutate_at(vars(paste0("time_",.x)),function(x) x = NA) %>% data.frame()
    
    df_status <-  df_wide %>% filter(baseline==.x) %>% select_at(vars(paste0("status_",colnames(tmat)))) %>% 
      mutate_at(vars(paste0("status_",.x)),function(x) x = NA) %>% data.frame()
    
    df_covars <- df_wide %>% filter(baseline==.x) %>% select_at(vars(setdiff(wide_vars,c("max_time","baseline")))) %>% 
      data.frame()
    
    df_id <- df_wide %>% filter(baseline==.x) %>% select(!!id) %>% data.frame()
  
    df_ms <- msprep(time = df_times, status = df_status, keep = df_covars, trans = tmat) 
    
    covs <- setdiff(wide_vars,c("max_time","baseline",quo_name(id)))
    df_ms <- expand.covs(df_ms,covs, append = TRUE)
    
    ls_ms[[.x]] = df_ms
  }

  out <- list(df_ms = ls_ms, trans_mat = ls_tmat)
  return(out)
}
```


[Markov model](https://hbiostat.org/r/hmisc/markov/sim#content)

# Data

```{r download}
# Source: http://asdfree.com/medical-expenditure-panel-survey-meps.html

# GVA{month}{year}: COV BY OTHER PUBLIC COVERAGE
# GVB{month}{year}: COV BY OTHER PUBLIC HMO
# GVC{month}{year}: COV BY OTHER PUBLIC PAYS PREM 
# HPD{month}{year}: PHOLDER OF PRIV INS (SRC UNKNWN) 
# HPE{month}{year}: PHOLDER OF EMPL UNION INS
# HPN{month}{year}: PHOLDER OF NONGROUP INS
# HPO{month}{year}: PHOLDER OF OTHER GROUP INS
# HPR{month}{year}: PHOLDER OF PRIVATE INSURANCE
# HPX{month}{year}: PHOLDER OF PRIV INS THRU EXCH
# IHS{month}{year}: COV BY INDIAN HEALTH SERVICE
# INS{month}{year}: COVR BY HOSP/MED INS 
# MCD{month}{year}{X}: COV BY MEDICAID OR SCHIP 
# MCR{month}{year}{X}: COV BY MEDICARE
# PDK{month}{year}: COVR BY PRIV INS (SOURCE UNKNWN) 
# PEG{month}{year}: COVERED BY EMPL UNION INS 
# PNE{month}{year}: COV BY NON-ESI,PHLDR OUTSIDE RU
# PNG{month}{year}: COVERED BY NONGROUP INS
# POE{month}{year}: COV BY ESI, PHOLDER OUTSIDE RU
# POG{month}{year}: COVERED BY OTHER GROUP INS
# PRI{month}{year}: COVERED BY PRIVATE INS
# PRX{month}{year}: COV BY PRIV INS THROUGH EXCHNG
# PUB{month}{year}{X}: COVR BY ANY PUBLIC INS 
# TRI{month}{year}{X}: COVERED BY TRICARE/CHAMPVA
# VAP{month}{year}{X}: COVERED BY VA

meps_sas_import <-
    function( this_url ){
        
        this_tf <- tempfile()
        
        download.file( this_url , this_tf , mode = 'wb' )
        
        this_tbl <- read_sas( this_tf )

        this_df <- data.frame( this_tbl )
        
        names( this_df ) <- tolower( names( this_df ) )
        
        this_df
    }

meps_sas_import2 <-
    function( this_url ){
        
        this_tf <- tempfile()
        
        download.file( this_url , this_tf , mode = 'wb' )
        
        this_tbl <- read_xpt( this_tf )

        this_df <- data.frame( this_tbl )
        
        names( this_df ) <- tolower( names( this_df ) )
        
        this_df
    }


if (!file.exists(here("_data/meps/h236.rds"))) {
    meps <-
        meps_sas_import( "https://meps.ahrq.gov/data_files/pufs/h236/h236v9.zip" )
    meps %>% write_rds(here("_data/meps/h236.rds"))
    
    meps2 <- 
        meps_sas_import2("https://meps.ahrq.gov/mepsweb/data_files/pufs/h164ssp.zip")
    meps2 %>% write_rds(here("_data/meps/h164.rds"))

} else {
    meps <- read_rds(here("_data/meps/h236.rds"))
    meps2 <- read_rds(here("_data/meps/h164.rds"))
}

# ins_types <- c("GVA","GVB","GVC","HPD","HPE","HPN","HPO","HPR","HPX","IHS","^INS.*X$","^MCD.*X$","^MCR.*X$","PDK","PEG","PNE","PNG","POE","POG","PRI",
#                "PRX","^PUB.*X$","^TRI.*X$","^VAP.*(Y1|Y2|Y3|Y4)$") %>% tolower()
# final_types <- c("gva", "gvb", "gvc", "hpd", "hpe", "hpn", "hpo", "hpr", "hpx", "ihs", "ins", "mcd", "mcr", "pdk", "peg", "pne", "png", "poe", "pog", "pri", "prx", "pub", "tri", "vap")

ins_types <- c("PRI","^INS.*X$","^MCR.*X$","^PUB.*X$","peg","poe","tri","vap","pne","png","pog","prx") %>% tolower()
final_types = c("pri","ins","mcr","pub","peg","poe","tri","vap","pne","png","pog","prx")
```

```{r processins}
df <- meps

ins_cov <- 
    ins_types %>% map(~({
        df[,c("dupersid",grep(.x,colnames(df), value=TRUE))] %>% 
        select(dupersid,contains("y1"),contains("y2"),contains("y3"),contains("y4")) %>% 
        rename_all(function(x) gsub("y1",".2018",x)) %>% 
        rename_all(function(x) gsub("y2",".2019",x)) %>% 
        rename_all(function(x) gsub("y3",".2020",x)) %>% 
        rename_all(function(x) gsub("y4",".2021",x)) %>% 
        rename_all(function(x) gsub("x$","",x)) %>% 
        select(-contains("ev.2018"),-contains("ev.2019"),-contains("ev.2020"),-contains("ev.2021")) %>% 
        rename_at(vars(contains("ja.")),function(x) gsub("ja.","_01.",x)) %>% 
        rename_at(vars(contains("fe.")),function(x) gsub("fe.","_02.",x)) %>% 
        rename_at(vars(contains("ma.")),function(x) gsub("ma.","_03.",x)) %>% 
        rename_at(vars(contains("ap.")),function(x) gsub("ap.","_04.",x)) %>% 
        rename_at(vars(contains("my.")),function(x) gsub("my.","_05.",x)) %>% 
        rename_at(vars(contains("ju.")),function(x) gsub("ju.","_06.",x)) %>% 
        rename_at(vars(contains("jl.")),function(x) gsub("jl.","_07.",x)) %>% 
        rename_at(vars(contains("au.")),function(x) gsub("au.","_08.",x)) %>% 
        rename_at(vars(contains("se.")),function(x) gsub("se.","_09.",x)) %>% 
        rename_at(vars(contains("oc.")),function(x) gsub("oc.","_10.",x)) %>% 
        rename_at(vars(contains("no.")),function(x) gsub("no.","_11.",x)) %>% 
        rename_at(vars(contains("de.")),function(x) gsub("de.","_12.",x)) %>% 
        select(dupersid,
               contains("01."),
               contains("02."),
               contains("03."),
               contains("04."),
               contains("05."),
               contains("06."),
               contains("07."),
               contains("08."),
               contains("09."),
               contains("10."),
               contains("11."),
               contains("12.")) %>% 
        select(-contains(".p.")) %>% 
        gather(tmp,value,-dupersid) %>% 
        arrange(dupersid) %>% 
        as_tibble() %>% 
        mutate(month = as.numeric(substr(tmp,5,6)),
               year = as.numeric(substr(tmp,8,11)),
               type = substr(tmp,1,3)) %>% 
        select(dupersid,type,month,year,value) %>% 
        spread(type,value)
    }))

df_ins <- ins_cov[[1]]

tmp <- 2:length(ins_cov) %>% map(~({
    df_ins <<- df_ins %>% left_join(ins_cov[[.x]],c("dupersid","month","year"))
}))

df_ins <- df_ins %>% mutate_at(vars(all_of(final_types)), function(x) ifelse(x==-1,NA,ifelse(x==2,0,ifelse(x==1,1,-99))))  %>% 
    mutate(unin = 1 - ins) %>% 
    mutate(type = case_when(
        # ins == 1 & mcr==1 ~ 4,
        # ins ==1 & pri == 1 ~ 1,
        # ins ==1 & pub == 1 ~ 2,
        # unin ==1 ~ 3,
        
      
        ins == 1 & mcr == 1 ~ 5,
        ins == 1 & (peg == 1 | poe == 1 | tri == 1 | vap == 1) ~ 1,
        ins == 1 & (pne == 1 | png == 1 | pog == 1 | pri == 1 | prx == 1) ~2,
        ins ==1 & pub == 1 ~ 3,
        unin ==1 ~ 4,          
        .default = NA
    )) 

    
df_baseline <- df_baseline_post <- 
    df %>% 
    filter(age1x!=-1) %>% 
    select(dupersid,dobmm,dobyy, starts_with("agey"),racev1x,racev2x,povlevy1,longwt) 

df_final <- df_final_post <- 
    df_baseline %>% 
    inner_join(df_ins,"dupersid") %>% 
    mutate(age = year - dobyy + -1 * as.integer(month<dobmm)) %>% 
    select(-starts_with("agey"),-starts_with("dob")) %>% 
    arrange(dupersid, year, month)
```

```{r processinspre}

df <- meps2

ins_cov <- 
    ins_types[-which(ins_types %in% c("poe","vap","pne","prx"))] %>% map(~({
        #cat(glue("{.x}"))
        df[,c("dupersid",grep(.x,colnames(df), value=TRUE))] %>% 
        select(dupersid,contains("y1"),contains("y2"),contains("y3"),contains("y4")) %>% 
        rename_all(function(x) gsub("y1",".2012",x)) %>% 
        rename_all(function(x) gsub("y2",".2013",x)) %>% 
        rename_all(function(x) gsub("x$","",x)) %>% 
        select(-contains("ev.2012"),-contains("ev.2013")) %>% 
        rename_at(vars(contains("ja.")),function(x) gsub("ja.","_01.",x)) %>% 
        rename_at(vars(contains("fe.")),function(x) gsub("fe.","_02.",x)) %>% 
        rename_at(vars(contains("ma.")),function(x) gsub("ma.","_03.",x)) %>% 
        rename_at(vars(contains("ap.")),function(x) gsub("ap.","_04.",x)) %>% 
        rename_at(vars(contains("my.")),function(x) gsub("my.","_05.",x)) %>% 
        rename_at(vars(contains("ju.")),function(x) gsub("ju.","_06.",x)) %>% 
        rename_at(vars(contains("jl.")),function(x) gsub("jl.","_07.",x)) %>% 
        rename_at(vars(contains("au.")),function(x) gsub("au.","_08.",x)) %>% 
        rename_at(vars(contains("se.")),function(x) gsub("se.","_09.",x)) %>% 
        rename_at(vars(contains("oc.")),function(x) gsub("oc.","_10.",x)) %>% 
        rename_at(vars(contains("no.")),function(x) gsub("no.","_11.",x)) %>% 
        rename_at(vars(contains("de.")),function(x) gsub("de.","_12.",x)) %>% 
        select(dupersid,
               contains("01."),
               contains("02."),
               contains("03."),
               contains("04."),
               contains("05."),
               contains("06."),
               contains("07."),
               contains("08."),
               contains("09."),
               contains("10."),
               contains("11."),
               contains("12.")) %>% 
        select(-contains(".p.")) %>% 
        gather(tmp,value,-dupersid) %>% 
        arrange(dupersid) %>% 
        as_tibble() %>% 
        mutate(month = as.numeric(substr(tmp,5,6)),
               year = as.numeric(substr(tmp,8,11)),
               type = substr(tmp,1,3)) %>% 
        select(dupersid,type,month,year,value) %>% 
        spread(type,value)
    }))

df_ins <- ins_cov[[1]]

tmp <- 2:length(ins_cov) %>% map(~({
    df_ins <<- df_ins %>% left_join(ins_cov[[.x]],c("dupersid","month","year"))
}))

final_types_ <- final_types[-which(final_types %in% c("poe","vap","pne","prx"))]

df_ins <- df_ins %>% mutate_at(vars(all_of(final_types_)), function(x) ifelse(x==-1,NA,ifelse(x==2,0,ifelse(x==1,1,-99))))  %>%
    mutate(unin = 1 - ins) %>% 
    mutate(type = case_when(
        ins == 1 & mcr == 1 ~ 5,
        ins == 1 & (peg == 1  | tri == 1 ) ~ 1,
        ins == 1 & ( png == 1 | pog == 1 | pri == 1 ) ~ 2,
        ins ==1 & pub == 1 ~ 3,
        unin == 1 ~ 4, 
        .default = NA
    )) 
    
df_baseline <- 
    df %>% 
    filter(age1x!=-1) %>% 
    select(dupersid,dobmm,dobyy, starts_with("agey"),racev1x,racev2x, povlevy1, longwt) 

df_final2 <-
    df_baseline %>% 
    inner_join(df_ins,"dupersid") %>% 
    mutate(age = year - dobyy + -1 * as.integer(month<dobmm)) %>% 
    select(-starts_with("agey"),-starts_with("dob")) %>% 
    arrange(dupersid, year, month)
    
```

# Parameterize

## Basic Parameters

```{r}
params_ <- list(
    v_tx_names = c("Post","Pre"),    # Treatment strategies 
    n_tx = 2,    
    
    v_tr_names = c("Emloyer","OthPrivate","Public","Uninsured"),
    v_ab_names = c("Medicare"),
    n_states = 5,
    
    horizon =  65,
    
    r_v_disc = 1e-6,
    Delta_t = 1,
    age0 = 0,
    
    age_categories = c(-1,10,18,26,34,39,44,49,54,59,64,1000)
)
params <- 
    with(params_,{
        modifyList(params_,list(
            v_names_states = c(v_tr_names, v_ab_names), # health state names
            omega = horizon/Delta_t,  # Total number of cycles
            r_v_disc_Delta_t = r_v_disc * Delta_t,  # Cycle discount rate: health outcomes
            ages = (0:(horizon/Delta_t))*Delta_t + age0, 
            alpha = length(v_ab_names),
            tau = length(v_tr_names), 
            s = length(v_tr_names)*horizon/Delta_t + length(v_ab_names) #total number of states;s=τω+α
        ))
    })

params$ages_trace <- params$ages
params$ages <- params$ages[-length(params$ages)] 
```

## Transition Intensities


Source: page 10 in [msm manual](https://cran.r-project.org/web/packages/msm/vignettes/msm-manual.pdf)

$$
q_{r s}(z(t))=q_{r s}^{(0)} \exp \left(\beta_{r s}^T z(t)\right)
$$
$$
p_{r s}(t-u, z(u))
$$
```{r}
pov_thresh = 200
df_traj <- 
    df_final2 %>% 
    arrange(dupersid,year,month) %>% 
    mutate(cycle = (year - 2012) * 12 + month ) %>% 
    select(dupersid,age,racev1x,longwt,cycle,type) %>% 
    na.omit() %>% 
    as_tibble() %>% 
    group_by(dupersid) %>% 
    filter(n()>=3) %>% 
    ungroup() %>% 
    mutate(age2 = cut(age,breaks = params$age_categories)) %>% 
    na.omit() %>% 
    # Sample EXCLUSION: Medicare -> Other Types of Insurance Not Allowed (only 2 cases)
    group_by(dupersid) %>% 
    mutate(nonelderly_medicare = max(type==5 & age <65)) %>% 
    filter(nonelderly_medicare == 0) %>% 
    mutate(next_type = lead(type)) %>% 
    mutate(transition_to_medicare = as.integer(type==5 & lag(type)!=5)) %>% 
    mutate(transition_to_medicare = ifelse(is.na(transition_to_medicare),0,transition_to_medicare) )  %>% 
    filter(type!=5| transition_to_medicare==1) %>% 
    ungroup() %>% 
    mutate(age10 = (age - mean(age))/10) %>% 
    mutate(newly_65 = as.integer(age==65 & lag(age==64))) %>% 
    mutate(longwt = scale(longwt))

P.init <- 
    df_traj %>% 
    mutate(next_type = lead(type)) %>% 
    count(type,next_type) %>% 
    na.omit() %>% 
    spread(next_type,n) %>% 
    data.frame() %>% 
    column_to_rownames("type") %>% 
    as.matrix()
P.init[1,] = P.init[1,]/sum(P.init[,1])
P.init[2,] = P.init[2,]/sum(P.init[,2])
P.init[3,] = P.init[3,]/sum(P.init[,3])
P.init[4,] = P.init[4,]/sum(P.init[,4])
P.init[5,] = c(0,0,0,0,1)
P.init[is.na(P.init)] = 0
     
Q.init = expm::logm(P.init)
diag(Q.init) = 0
Q.init[Q.init<0] = 0
diag(Q.init) = -rowSums(Q.init)


Q = crudeinits.msm(type ~ cycle, dupersid, data = df_traj, qmatrix = Q.init)

fit_pre <- names(table(df_traj$age2)) %>% map(~({
    msm(type ~ cycle, dupersid, data = df_traj %>% filter(age2==.x), qmatrix = Q, exacttimes=TRUE, covariates = ~age )
})) %>% 
    set_names(names(table(df_traj$age2)))

```

```{r}
df_traj <- 
    df_final %>% 
    arrange(dupersid,year,month) %>% 
    mutate(cycle = (year - 2018) * 12 + month ) %>% 
    select(dupersid,age,racev1x,cycle,type,longwt) %>% 
    na.omit() %>% 
    as_tibble() %>% 
    group_by(dupersid) %>% 
    filter(n()>=3) %>% 
    ungroup() %>% 
    mutate(age2 = cut(age,breaks = params$age_categories)) %>% 
    na.omit() %>% 
    mutate(race = as.factor(racev1x)) %>% 
    # Sample EXCLUSION: Medicare -> Other Types of Insurance Not Allowed (only 2 cases)
    group_by(dupersid) %>% 
    mutate(nonelderly_medicare = max(type==5 & age <65)) %>% 
    filter(nonelderly_medicare == 0) %>% 
    mutate(next_type = lead(type)) %>% 
    mutate(transition_to_medicare = as.integer(type==5 & lag(type)!=5)) %>% 
    mutate(transition_to_medicare = ifelse(is.na(transition_to_medicare),0,transition_to_medicare) )  %>% 
    filter(type!=5 | transition_to_medicare==1) %>% 
    ungroup() %>% 
    mutate(age10 = (age - mean(age))/10) %>% 
    mutate(newly_65 = as.integer(age==65 & lag(age==64))) %>% 
    mutate(longwt = scale(longwt))
    
P.init <- 
    df_traj %>% 
    mutate(next_type = lead(type)) %>% 
    count(type,next_type) %>% 
    na.omit() %>% 
    spread(next_type,n) %>% 
    data.frame() %>% 
    column_to_rownames("type") %>% 
    as.matrix()
P.init[1,] = P.init[1,]/sum(P.init[,1])
P.init[2,] = P.init[2,]/sum(P.init[,2])
P.init[3,] = P.init[3,]/sum(P.init[,3])
P.init[4,] = P.init[4,]/sum(P.init[,4])
P.init[5,] = c(0,0,0,0,1)
P.init[is.na(P.init)] = 0
     
Q.init = expm::logm(P.init)
diag(Q.init) = 0
Q.init[Q.init<0] = 0
diag(Q.init) = -rowSums(Q.init)


Q = crudeinits.msm(type ~ cycle, dupersid, data = df_traj, qmatrix = Q.init)

fit <- names(table(df_traj$age2)) %>% map(~({
    msm(type ~ cycle, dupersid, data = df_traj %>% filter(age2==.x), qmatrix = Q, exacttimes=TRUE, covariates = ~age)
})) %>% 
    set_names(names(table(df_traj$age2)))
```


```{r}
params1 <- with(params,modifyList(params,list(
    m_R = 
        ages %>% map(~({
            
            aa <- paste0(cut(.x,age_categories));aa
            #Q_ = msm::qmatrix.msm(fit, ci = "none",covariates=list(age2=cut(.x, age_categories))) %>% as.matrix()
            Q_ = msm::qmatrix.msm(fit_pre[[aa]], ci = "none", covariates = list(age = .x)) %>% as.matrix()
            
            diag(Q_) = 0
            if (.x < 65) {
                #debug Q_ <- matrix(0,ncol=ncol(Q_),nrow=nrow(Q_))
                Q_[,5] = c(0,0,0,0,0)
                diag(Q_) = 0

            }  else if (.x >= 65) {
                Q_[1,] = c(0,0,0,0,100)
                Q_[2,] = c(0,0,0,0.100)
                Q_[3,] = c(0,0,0,0,100)
                Q_[4,] = c(0,0,0,0,100)
                Q_[5,] = c(0,0,0,0,0)
            }   
            diag(Q_) = -rowSums(Q_)  
            Q_pre <- Q_ * 12 * Delta_t 
            
            
            Q_ = msm::qmatrix.msm(fit[[aa]], ci = "none", covariates = list(age = .x)) %>% as.matrix()
            
            diag(Q_) = 0
            if (.x < 65) {
                #debug Q_ <- matrix(0,ncol=ncol(Q_),nrow=nrow(Q_))
                Q_[,5] = c(0,0,0,0,0)
                diag(Q_) = 0

            }  else if (.x >= 65) {
                Q_[1,] = c(0,0,0,0,100)
                Q_[2,] = c(0,0,0,0.100)
                Q_[3,] = c(0,0,0,0,100)
                Q_[4,] = c(0,0,0,0,100)
                Q_[5,] = c(0,0,0,0,0)
            }    
            diag(Q_) = -rowSums(Q_)  
            Q_ <- Q_ * 12 * Delta_t 
            
         array(c(as.vector(Q_pre),as.vector(Q_)), 
              dim = c(length(v_tr_names)+ length(v_ab_names),length(v_tr_names)+ length(v_ab_names),length(v_tx_names)),
          dimnames = list(c(v_tr_names,v_ab_names),c(v_tr_names,v_ab_names),v_tx_names)) %>% 
            apply(.,3,function(x) x, simplify=FALSE) 
        }))
)))

```

```{r trace}

df_trace <- 
    df_baseline_post %>% 
    filter(dupersid %in% df_traj$dupersid) %>% 
    left_join(df_final_post %>% arrange(year,month) %>% group_by(dupersid) %>% filter(row_number()==1) %>% select(dupersid,age,type0=type),"dupersid") %>% 
    as_tibble()

s0 <- df_trace %>% filter(age==0) %>% fastDummies::dummy_cols("type0") %>% summarise_at(vars(starts_with("type0_")),mean) %>% as.vector() %>% unlist()
s0 <- c(s0,0)

params_ <- with(params1,modifyList(params1,list(
  m_R_t = m_R %>% map(~({
    tmp <- .x
    tmp %>% map(~(.x))
  }))
)))

params_ <- with(params_, modifyList(params_, list(m_R_ = m_R_t %>% transpose())))
params_$m_R = params_$m_R_

params_ <- with(params_,modifyList(params_,list(
  m_P = m_R %>% map(~({
    tmp <- .x
    tmp %>% map(~(expm(.x)))
  }))
)))

trace1 <- 
    with(params_, {
        m_P %>% map( ~ ({
            P = .x
            occ <- s0
            P %>% map(~({
              occ <<- occ %*% .x
            })) %>% 
            map(~(data.frame(.x))) %>% 
            bind_rows()
        }))
    })  
library(zoo)

df_trace %>% 
    fastDummies::dummy_cols("type0") %>% 
    filter(age<65) %>% 
    #mutate_at(vars(starts_with("type0_")),function(x) rollmean(x,10,na.pad=T)) %>% 
    group_by(age) %>% 
    summarise_at(vars(starts_with("type0_")),~weighted.mean(.,w=longwt)) %>% 
    set_names(c("age",params_$v_tr_names,"missing")) %>% 
    select(-missing) %>% 
    na.omit() %>% 
    as_tibble() %>% 
    gather(type,value,-age) %>% 
    ggplot(aes(x = age, y = value, colour = type)) + geom_point(se=FALSE) + 
    geom_line(
        data = trace1$Pre %>% 
                mutate(ages = params_$ages) %>% 
                as_tibble() %>% 
                select_at(vars(params$v_tr_names,ages)) %>% 
                rename(age = ages) %>% 
                gather(type,value,-age) , lty=1, size=1.25) +
    hrbrthemes::theme_ipsum()

```

```{r}

params3_ <- with(params1,modifyList(params1,list(
    alpha = length(v_ab_names),
    tau = length(v_tr_names), 
    s = length(v_tr_names)*omega + length(v_ab_names) #total number of states;s=τω+α
)))
params3_ <- with(params3_,modifyList(params3_,list(
  m_R_t = m_R %>% map(~({
    tmp <- .x
    tmp %>% map(~(t(.x)))
  }))
)))

params3 <- with(params3_, modifyList(params3_, list(m_R_ = m_R_t %>% transpose())))
params3$m_R = params3$m_R_

params3 <- with(params3,modifyList(params3,list(
    m_V = m_R %>% map(~({
            R = .x
            R %>% map(~({
              m <- .x[v_tr_names,v_tr_names] 
            }))
            
        })),
     
    m_Q = m_R %>% map(~({
      R = .x 
      R %>% map(~({
                V = .x[v_tr_names,v_tr_names]
                S = .x[v_ab_names,v_tr_names]
                zero_ <- matrix(0, nrow = length(v_tr_names)+length(v_ab_names), ncol = length(v_ab_names))
                tmp <- cbind(rbind(V,S),zero_)
                dimnames(tmp) <- list(c(v_tr_names,v_ab_names),c(v_tr_names,v_ab_names))
                tmp
      }))
    }))    
)))

params3 <- with(params3,modifyList(params3,list(
    m_P3 = m_Q %>% map(~({
          Q = .x
          Q %>% map(~(expm(.x * Delta_t)))
    }))
)))
params3$m_P = params3$m_P3
```

```{r}
params3 <- with(params3,modifyList(params3,list(
    m_U = m_P %>% map(~({
          P <- .x 
          P %>% map(~(.x[v_tr_names,v_tr_names]))
    })),
    m_M_ = m_P %>% map(~({
        P = .x
        P %>% map(~(as.matrix(.x[v_ab_names,v_tr_names])))
        
    }))
)))
# For models with one absorbing state
params3 <- with(params3,modifyList(params3,list(
    m_M = m_M_ %>% map(~({
        M = .x
        M %>% map(~(t(as.matrix(.x))))
    }))
)))

params3 <- with(params3,modifyList(params3,list(
    D = {
        # Create diagonal age advancement matrix
        D <- matrix(0, omega, omega)
        vec <- rep(1, omega-1)
        D[row(D)-1 == col(D)] <- vec
        #D[omega,omega] = 1
        D
    }
)))

vec <-  # a simple function to return the vec of an array
    function(x) {
        y <- c(x)
        return(y)
    }

vecperm <- 
    # vecperm
    # function to calculate the vec permutation matrix K of index m,n
    # let X be a m x n matrix, and X' the transpose of X
    # then K satisfies 
    # vec(X') = K*vec(X)
    function(m, n) {
        K <- matrix(0, m * n, m * n)
        a <- matrix(0, m, n)
        
        for (i in 1:m) {
            for (j in 1:n) {
                e <- a
                e[i, j] <- 1
                K <- K + kronecker(e, t(e))
            }
        }
        return(K)
    }

```

```{r}
params3 <- with(params3,modifyList(params3,list(
    bbD_ = kronecker(diag(tau), D),
    bbU_ =  m_U %>% 
            map(~(bdiag(.x))),
    K = vecperm(tau, omega)
)))

params3 <- with(params3,modifyList(params3,list(
    mUtilde = bbU_ %>% map( ~ ({
        t(K) %*% bbD_ %*% K %*% .x
    }))
)))

params3 <- with(params3,modifyList(params3,list(
    mMtilde = m_M %>% map(~({
      do.call(cbind,.x) 
    }))  
)))

params3 <- with(params3,modifyList(params3,list(
    mPtilde =  map2(mUtilde, mMtilde,  ~ ({
            rbind(cbind(.x, matrix(0, tau * omega, alpha)) ,
                  cbind(.y, diag(alpha)))
        }))
)))

# Markov chain with rewards functions

mcwr_occupancy <- function(params, H, V) {
    with(params,{
        map(v_tx_names,~({
            U = mUtilde[[.x]]
            P = mPtilde[[.x]]
            v_ = V[[.x]]
            N = solve(diag(tau*omega)-U)
            h = vec(H) %>% as.matrix()
            not_h = 1-h
            v <- vec(v_) %>% as.matrix()
            B1 <- h %*% t(v) + 0.5 * (not_h %*% t(v)) + 0.5 * (v %*% t(not_h)) # Eq. 46
            C1 = 0.5 * (rep(1,alpha) %*%  t(v)) # Eq. 48
            R1 = rbind(cbind(B1, matrix(0, tau * omega, alpha)) ,
                              cbind(C1, diag(alpha))) 
            R2 = R1 * R1
            R3 = R1 * R1 * R1
            Z = cbind(diag(tau*omega),matrix(0,nrow=tau*omega, ncol=alpha))
            e = rep(1,s)
            rho1_ <- t(N)%*% Z %*% t(P * R1) %*% e
            rho1_
        }))
    })
}

mcwr_yll <- function(params, life_expectancy, disc) {
    with(params,{
        map2(mUtilde,mPtilde,~({
            U = .x
            P = .y
            N = solve(diag(tau*omega)-U)
            Z = cbind(diag(tau*omega),matrix(0,nrow=tau*omega, ncol=alpha))
            disc_ = rev(sort(rep(disc,length(v_tr_names))))
            eta1_ex_ = rev(sort(rep(life_expectancy,length(v_tr_names))))
            eta1_ex =  eta1_ex_
            
            B1 = matrix(0,nrow=tau*omega, ncol = tau*omega)
            C1 = rbind(matrix(0,nrow=1,ncol=tau*omega),eta1_ex*disc_) 
            R1 = cbind(rbind(B1,C1),matrix(0,nrow=tau*omega+2,ncol=2))
            R2 = R1 * R1
            R3 = R1 * R1 * R1
            Z = cbind(diag(tau*omega),matrix(0,nrow=tau*omega, ncol=alpha))
            e = rep(1,s)
            rho1_ = t(N) %*% Z %*% t(.y * R1) %*% e
            rho1_
        }))
    })
}


```

```{r}

H = with(params3,matrix(1,nrow=tau, ncol=omega))

with(params3,{
  V_EMP <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 1 * Delta_t     
    v_[2,] <- 0 * Delta_t 
    v_[3,] <- 0 * Delta_t 
    v_[4,] <- 0 * Delta_t 
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params3,{
  V_NG <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 0 * Delta_t     
    v_[2,] <- 1 * Delta_t 
    v_[3,] <- 0 * Delta_t 
    v_[4,] <- 0 * Delta_t 
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params3,{
  V_PUB <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 0 * Delta_t     
    v_[2,] <- 0 * Delta_t 
    v_[3,] <- 1 * Delta_t 
    v_[4,] <- 0 * Delta_t 
    v_
  })) %>% 
    set_names(v_tx_names)
})

with(params3,{
  V_UNIN <<- v_tx_names %>% map(~({
    v_ <- matrix(0,nrow=tau, ncol = omega) 
    v_[1,] <- 0 * Delta_t     
    v_[2,] <- 0 * Delta_t 
    v_[3,] <- 0 * Delta_t 
    v_[4,] <- 1 * Delta_t 
    v_
  })) %>% 
    set_names(v_tx_names)
})


EMP_ <- params3 %>% mcwr_occupancy(H = H, V = V_EMP)
NG_ <- params3 %>% mcwr_occupancy(H = H, V = V_NG)
PUB_ <- params3 %>% mcwr_occupancy(H = H, V = V_PUB)
UNIN_ <- params3 %>% mcwr_occupancy(H = H, V = V_UNIN)
```


```{r}
#| column: screen
#| fig-height: 10

df_res <- 
    df_baseline_post %>% 
    left_join(df_final_post %>% arrange(year,month) %>% group_by(dupersid) %>% filter(row_number()==1) %>% select(dupersid,age,type0=type),"dupersid") %>% 
    as_tibble()


# These numbers are going to tell us, for a 40 year old who starts in ESI [NG, PUB, UNIN], they will expect to spend x years in ESI before transitioning to Medicare. 
res_unin <- params$ages %>% map_df(~({
    aa = .x
    e_ <- rep(0,length(params$ages))
    e_[which(params$ages==aa)] = 1

    UNIN_ %>% map(~({
    res <- kronecker(t(e_),diag(params$tau)) %*% .x
    as.matrix(res) %>% as_tibble("res")
    })) %>% 
    cbind.data.frame() %>% 
    set_names(c("Pre","Post") ) %>% 
    mutate(change = Post - Pre) %>% 
    mutate(ins_type = params$v_tr_names) %>% 
    rename(unin_dur = Post, change_unin_dur = change) %>% 
    mutate(type0 = 1:4) %>% 
    mutate(age = aa) %>% 
    select(age,type0,unin_dur, change_unin_dur)
}))

res_pub <- params$ages %>% map_df(~({
    aa = .x
    e_ <- rep(0,length(params$ages))
    e_[which(params$ages==aa)] = 1

    PUB_ %>% map(~({
    res <- kronecker(t(e_),diag(params$tau)) %*% .x
    as.matrix(res) %>% as_tibble("res")
    })) %>% 
    cbind.data.frame() %>% 
    set_names(c("Pre","Post") ) %>% 
    mutate(change = Post - Pre) %>% 
    mutate(ins_type = params$v_tr_names) %>% 
    rename(pub_dur = Post, change_pub_dur = change) %>% 
    mutate(type0 = 1:4) %>% 
    mutate(age = aa) %>% 
    select(age,type0,pub_dur, change_pub_dur)
}))


res_esi <- params$ages %>% map_df(~({
    aa = .x
    e_ <- rep(0,length(params$ages))
    e_[which(params$ages==aa)] = 1

    EMP_ %>% map(~({
    res <- kronecker(t(e_),diag(params$tau)) %*% .x
    as.matrix(res) %>% as_tibble("res")
    })) %>% 
    cbind.data.frame() %>% 
    set_names(c("Pre","Post") ) %>% 
    mutate(change = Post - Pre) %>% 
    mutate(ins_type = params$v_tr_names) %>% 
    rename(esi_dur = Post, change_esi_dur = change) %>% 
    mutate(type0 = 1:4) %>% 
    mutate(age = aa) %>% 
    select(age,type0,esi_dur, change_esi_dur)
}))


res_ng <- params$ages %>% map_df(~({
    aa = .x
    e_ <- rep(0,length(params$ages))
    e_[which(params$ages==aa)] = 1

    NG_ %>% map(~({
    res <- kronecker(t(e_),diag(params$tau)) %*% .x
    as.matrix(res) %>% as_tibble("res")
    })) %>% 
    cbind.data.frame() %>% 
    set_names(c("Pre","Post") ) %>% 
    mutate(change = Post - Pre) %>% 
    mutate(ins_type = params$v_tr_names) %>% 
    rename(ng_dur = Post, change_ng_dur = change) %>% 
    mutate(type0 = 1:4) %>% 
    mutate(age = aa) %>% 
    select(age,type0,ng_dur, change_ng_dur)
}))


res_post <- df_res %>% 
    inner_join(res_pub,c("type0","age")) %>% 
        inner_join(res_unin,c("type0","age")) %>% 
        inner_join(res_ng,c("type0","age")) %>% 
        inner_join(res_esi,c("type0","age")) %>% 
        group_by(age) %>% 
    summarise(unin = mean(unin_dur,wt=longwt),pub = mean(pub_dur,wt=longwt),esi = mean(esi_dur,wt=longwt), ng = mean(ng_dur,wt=longwt)) %>% 
    mutate(period = "post")

res_pre <- df_res %>% 
    inner_join(res_pub,c("type0","age")) %>% 
        inner_join(res_unin,c("type0","age")) %>% 
        inner_join(res_ng,c("type0","age")) %>% 
        inner_join(res_esi,c("type0","age")) %>% 
        group_by(age) %>% 
    summarise(unin = mean(unin_dur - change_unin_dur,wt=longwt),pub = mean(pub_dur - change_pub_dur,wt=longwt),esi = mean(esi_dur - change_esi_dur,wt=longwt), ng = mean(ng_dur - change_ng_dur,wt=longwt)) %>% 
    mutate(period = "pre")


res_pre %>% 
    bind_rows(res_post) %>% 
    gather(type,value,-age,-period) %>% 
    mutate(type = factor(type, levels = c("esi","ng","pub","unin"), labels = 
                             c("Employer-Sponsored Insurance", "Non-Group Insurance" , "Public Insurance", "Uninsured")))  %>% 
    ggplot(aes(x = age, y = value,  pch = period)) + geom_point(size=1) + 
    hrbrthemes::theme_ipsum() + 
    scale_shape_manual(values = c(3,2)) + 
    facet_grid(type~., scales = "free") + geom_line(colour = "grey") + 
    labs(x = "Age", y = "Expected Years")

```


```{r}
#| column: screen
#| fig-height: 10

res_change <- df_res %>% 
    inner_join(res_pub,c("type0","age")) %>% 
        inner_join(res_unin,c("type0","age")) %>% 
        inner_join(res_ng,c("type0","age")) %>% 
        inner_join(res_esi,c("type0","age")) %>% 
        group_by(age) %>% 
    summarise(unin = mean(change_unin_dur,wt=longwt),pub = mean(change_pub_dur,wt=longwt),esi = mean( change_esi_dur,wt=longwt), ng = mean(change_ng_dur,wt=longwt)) %>% 
    mutate(period = "pre")

res_change %>% 
    gather(type,value,-age,-period) %>% 
    mutate(type = factor(type, levels = c("esi","ng","pub","unin"), labels = 
                             c("Employer-Sponsored Insurance", "Non-Group Insurance" , "Public Insurance", "Uninsured")))  %>% 
    ggplot(aes(x = age, y = value)) + geom_point(size=1) + 
    hrbrthemes::theme_ipsum() + 
    scale_shape_manual(values = c(3,2)) + 
    facet_grid(type~., scales = "free") + geom_line(colour = "grey") + 
    labs(x = "Age", y = "Expected Years") + 
    geom_hline(aes(yintercept = 0),lwd=1) 

```

```{r}
decompose_occupancy <- function(params, age_groups = c(0,10,18,26,34,44,54,65)) {
    levels(cut(params3$ages,age_groups)) %>% map_df(~({
        aa = .x
        
        H_ = with(params,matrix(rep(as.integer(cut(ages,breaks = age_groups)==aa),params$tau), nrow=tau, ncol=omega, byrow= TRUE))
        
        with(params,{
            V_EMP_ <<- v_tx_names %>% map(~({
                v_ <- matrix(0,nrow=tau, ncol = omega) 
                v_[1,] <- 1 * Delta_t     
                v_[2,] <- 0 * Delta_t 
                v_[3,] <- 0 * Delta_t 
                v_[4,] <- 0 * Delta_t 
                v_*H_
            })) %>% 
                set_names(v_tx_names)
        })
        
        with(params,{
            V_NG_ <<- v_tx_names %>% map(~({
                v_ <- matrix(0,nrow=tau, ncol = omega) 
                v_[1,] <- 0 * Delta_t     
                v_[2,] <- 1 * Delta_t 
                v_[3,] <- 0 * Delta_t 
                v_[4,] <- 0 * Delta_t 
                v_*H_
            })) %>% 
                set_names(v_tx_names)
        })
        
        with(params,{
            V_PUB_ <<- v_tx_names %>% map(~({
                v_ <- matrix(0,nrow=tau, ncol = omega) 
                v_[1,] <- 0 * Delta_t     
                v_[2,] <- 0 * Delta_t 
                v_[3,] <- 1 * Delta_t 
                v_[4,] <- 0 * Delta_t 
                v_*H_
            })) %>% 
                set_names(v_tx_names)
        })
        
        with(params,{
            V_UNIN_ <<- v_tx_names %>% map(~({
                v_ <- matrix(0,nrow=tau, ncol = omega) 
                v_[1,] <- 0 * Delta_t     
                v_[2,] <- 0 * Delta_t 
                v_[3,] <- 0 * Delta_t 
                v_[4,] <- 1 * Delta_t 
                v_*H_
            })) %>% 
                set_names(v_tx_names)
        })
        
        EMP_ <- params %>% mcwr_occupancy(H = H_, V = V_EMP_)
        NG_ <- params %>% mcwr_occupancy(H = H_, V = V_NG_)
        PUB_ <- params %>% mcwr_occupancy(H = H_, V = V_PUB_)
        UNIN_ <- params %>% mcwr_occupancy(H = H_, V = V_UNIN_)
        
        res_unin <- params$ages %>% map_df(~({
            aa = .x
            e_ <- rep(0,length(params$ages))
            e_[which(params$ages==aa)] = 1
            
            UNIN_ %>% map(~({
                res <- kronecker(t(e_),diag(params$tau)) %*% .x
                as.matrix(res) %>% as_tibble("res")
            })) %>% 
                cbind.data.frame() %>% 
                set_names(c("Pre","Post") ) %>% 
                mutate(change = Post - Pre) %>% 
                mutate(ins_type = params$v_tr_names) %>% 
                rename(unin_dur = Post, change_unin_dur = change) %>% 
                mutate(type0 = 1:4) %>% 
                mutate(age = aa) %>% 
                select(age,type0,unin_dur, change_unin_dur)
        })) 
        
        res_pub <- params$ages %>% map_df(~({
            aa = .x
            e_ <- rep(0,length(params$ages))
            e_[which(params$ages==aa)] = 1
            
            PUB_ %>% map(~({
                res <- kronecker(t(e_),diag(params$tau)) %*% .x
                as.matrix(res) %>% as_tibble("res")
            })) %>% 
                cbind.data.frame() %>% 
                set_names(c("Pre","Post") ) %>% 
                mutate(change = Post - Pre) %>% 
                mutate(ins_type = params$v_tr_names) %>% 
                rename(pub_dur = Post, change_pub_dur = change) %>% 
                mutate(type0 = 1:4) %>% 
                mutate(age = aa) %>% 
                select(age,type0,pub_dur, change_pub_dur)
        }))
        
        
        res_esi <- params$ages %>% map_df(~({
            aa = .x
            e_ <- rep(0,length(params$ages))
            e_[which(params$ages==aa)] = 1
            
            EMP_ %>% map(~({
                res <- kronecker(t(e_),diag(params$tau)) %*% .x
                as.matrix(res) %>% as_tibble("res")
            })) %>% 
                cbind.data.frame() %>% 
                set_names(c("Pre","Post") ) %>% 
                mutate(change = Post - Pre) %>% 
                mutate(ins_type = params$v_tr_names) %>% 
                rename(esi_dur = Post, change_esi_dur = change) %>% 
                mutate(type0 = 1:4) %>% 
                mutate(age = aa) %>% 
                select(age,type0,esi_dur, change_esi_dur)
        }))
        
        
        res_ng <- params$ages %>% map_df(~({
            aa = .x
            e_ <- rep(0,length(params$ages))
            e_[which(params$ages==aa)] = 1
            
            NG_ %>% map(~({
                res <- kronecker(t(e_),diag(params$tau)) %*% .x
                as.matrix(res) %>% as_tibble("res")
            })) %>% 
                cbind.data.frame() %>% 
                set_names(c("Pre","Post") ) %>% 
                mutate(change = Post - Pre) %>% 
                mutate(ins_type = params$v_tr_names) %>% 
                rename(ng_dur = Post, change_ng_dur = change) %>% 
                mutate(type0 = 1:4) %>% 
                mutate(age = aa) %>% 
                select(age,type0,ng_dur, change_ng_dur)
        }))
        
        df_res <- 
            df_baseline_post %>% 
            left_join(df_final_post %>% arrange(year,month) %>% group_by(dupersid) %>% filter(row_number()==1) %>% select(dupersid,age,type0=type),"dupersid") %>% 
            as_tibble() %>% 
            mutate(age_tmp = cut(age, breaks = age_groups))
        
        res_post <- df_res %>% 
            inner_join(res_pub,c("type0","age")) %>% 
            inner_join(res_unin,c("type0","age")) %>% 
            inner_join(res_ng,c("type0","age")) %>% 
            inner_join(res_esi,c("type0","age")) %>% 
            group_by(age) %>% 
            summarise(unin = mean(unin_dur,wt=longwt),pub = mean(pub_dur,wt=longwt),esi = mean(esi_dur,wt=longwt), ng = mean(ng_dur,wt=longwt)) %>% 
            mutate(period = "post")
        
        res_pre <- df_res %>% 
            inner_join(res_pub,c("type0","age")) %>% 
            inner_join(res_unin,c("type0","age")) %>% 
            inner_join(res_ng,c("type0","age")) %>% 
            inner_join(res_esi,c("type0","age")) %>% 
            group_by(age) %>% 
            summarise(unin = mean(unin_dur - change_unin_dur,wt=longwt),pub = mean(pub_dur - change_pub_dur,wt=longwt),esi = mean(esi_dur - change_esi_dur,wt=longwt), ng = mean(ng_dur - change_ng_dur,wt=longwt)) %>% 
            mutate(period = "pre")
        
        df_res %>% 
            inner_join(res_pub,c("type0","age")) %>% 
            inner_join(res_unin,c("type0","age")) %>% 
            inner_join(res_ng,c("type0","age")) %>% 
            inner_join(res_esi,c("type0","age")) %>% 
            group_by(age) %>% 
            summarise(unin = mean(change_unin_dur,wt=longwt),pub = mean(change_pub_dur,wt=longwt),esi = mean( change_esi_dur,wt=longwt), ng = mean(change_ng_dur,wt=longwt)) %>% 
            mutate(period = "pre") %>% 
            mutate(age_group = aa)
    }))

}

res_decomp <- params3 %>% decompose_occupancy(seq(-1,65,5))
res_decomp_tot <- params3 %>% decompose_occupancy(c(-1,100))
options(scipen=999)

aa = 0
res_decomp %>% 
    filter(age==aa) %>% 
    mutate(cum_unin = cumsum(unin)) %>% 
    bind_rows(res_decomp_tot %>% filter(age==aa) %>% mutate(age_group = "Total")) %>% 
    mutate_at(vars(unin,pub,esi,ng),~round(.,2)) %>% 
    mutate(cum_unin = round(cum_unin,2)) %>% 
    select(age_group,esi,ng,pub,unin,cum_unin) %>% 
    filter(esi!=0) %>% 
    flextable()
```

```{r}

```

